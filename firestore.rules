rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    function isSeller() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "seller" ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin");
    }

    function isBuyer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "buyer";
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Products collection
    match /products/{productId} {
      allow read: if true;
      allow create: if isSeller() && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if isAdmin() || 
        (isSeller() && resource.data.sellerId == request.auth.uid);
    }
    
    // Wishlists collection
    match /wishlists/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isBuyer() && request.resource.data.buyerId == request.auth.uid;
      allow update: if isAdmin() || 
        (isSeller() && resource.data.sellerId == request.auth.uid) ||
        (isBuyer() && resource.data.buyerId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Cart collection
    match /carts/{userId} {
      allow read: if isOwner(userId);
      allow write: if isBuyer() && isOwner(userId);
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isBuyer() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }
    
    // Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
        request.resource.data.senderId == request.auth.uid;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  resource.data.userId == request.auth.uid;
      
      allow create: if isAdmin() ||
        (isAuthenticated() && (
          request.resource.data.userId == request.auth.uid ||
          (request.resource.data.type == "new_order" && request.resource.data.orderId != null) ||
          (request.resource.data.type == "order_status" && request.resource.data.orderId != null) ||
          (
            request.resource.data.type == "order_status" &&
            request.resource.data.orderId != null &&
            get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.sellerId == request.auth.uid
          )
        ));
      
      allow update: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
    }

    // Receipt History collection
    match /receipt_history/{receiptId} {
      allow read: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (
        request.resource.data.buyerId == request.auth.uid ||
        request.resource.data.sellerId == request.auth.uid
      );
      allow update: if isAdmin() || 
        (isOwner(resource.data.buyerId) && 
         (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status']))) ||
        (isSeller() && 
         resource.data.sellerId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt']));
      allow delete: if isAdmin();
    }
  }
} 